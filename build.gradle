plugins {
  id 'war'
  id 'checkstyle'
  id 'eclipse-wtp'
  id 'findbugs'
  id 'jdepend'
  id 'org.flywaydb.flyway' version '4.0.3'
}

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

def jdkVersion = 1.8
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

repositories {
  jcenter()
}

configurations {
  testJMockit
}

def jerseyVersion = "2.22.+"

dependencies {
  providedCompile 'javax.servlet:javax.servlet-api:3.0.+'
  providedCompile 'org.eclipse.jetty:jetty-runner:9.3.+'

  compile 'org.projectlombok:lombok:1.16.+'
  compile 'ch.qos.logback:logback-classic:1.1.+'
  compile 'org.postgresql:postgresql:9.4.+'
  compile 'commons-dbutils:commons-dbutils:1.+'

  // https://jersey.java.net/documentation/latest/modules-and-dependencies.html
  //compile 'javax.ws.rs:javax.ws.rs-api:2.0.+'
  compile "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}"
  //compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.7.+'

  compile 'io.swagger:swagger-jersey2-jaxrs:1.5.8'
  //compile 'com.google.guava:guava:19.+'
  //compile 'org.apache.commons:commons-lang3:3.+'
  //compile 'commons-io:commons-io:2.+'
  //compile 'org.mongojack:mongojack:2.6.+'
  //compile 'com.typesafe:config:1.3.+'

  testJMockit 'org.jmockit:jmockit:1.+'
  testCompile configurations.testJMockit.dependencies
  testCompile 'junit:junit:4.+'
  testCompile 'org.hamcrest:hamcrest-all:1.+'

  // use org.apache.naming package
  testCompile 'org.apache.tomcat:tomcat-catalina:8.5.+'
  testCompile "org.glassfish.jersey.test-framework:jersey-test-framework-core:${jerseyVersion}"
  testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:${jerseyVersion}"

  // use jax-rs client in integration test
  testCompile "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"
}

test {
    jvmArgs "-javaagent:${configurations.testJMockit.asPath}"
    if (System.getProperty("config.resource")) {
        systemProperty "config.resource", System.getProperty("config.resource")
    }

    reports {
        junitXml.enabled = true
        html.enabled = false
    }
    //testLogging {
    //    showStandardStreams = true
    //}
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

apply from: "settings/application.conf"

// local tomcatにdeploy
task deploy(type: Copy, dependsOn: ['war']) {
  from 'build/libs'
  into '../server/apache-tomcat-8.0.33/webapps'
  include '*.war'
  // rename 'todo-api', 'ROOT'
}

task copyRunner(type: Copy) {
   from configurations.providedCompile
   into 'build/runtime'
   include 'jetty-runner*'
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = true
    html.enabled = false
  }
}

// eclipse用に依存関係のexport
eclipse.classpath.file {
  whenMerged { classpath ->
    classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = false
  }
}

task stage {
  dependsOn war, ':tools/migrations:stage2', copyRunner
}

defaultTasks 'eclipse', 'deploy'
